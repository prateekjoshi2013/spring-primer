spring.datasource.username=prateek
spring.datasource.password=root
spring.datasource.url=jdbc:mysql://mysqldb:3306/mydb?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
spring.jpa.database=mysql
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# hikari connection pool config
spring.datasource.hikari.pool-name=mydb-pool
spring.datasource.hikari.maximum-pool-size=5

# https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration
# some configurations to get maximum out of the mysql hikari connection pool
spring.datasource.hikari.data-source-properties.cachePrepStmts=true
spring.datasource.hikari.data-source-properties.prepStmtCacheSize=250
spring.datasource.hikari.data-source-properties.prepStmtCacheSqlLimit=2048
spring.datasource.hikari.data-source-properties.useServerPrepStmts=true
spring.datasource.hikari.data-source-properties.useLocalSessionState=true
spring.datasource.hikari.data-source-properties.rewriteBatchedStatements=true
spring.datasource.hikari.data-source-properties.cacheResultSetMetadata=true
spring.datasource.hikari.data-source-properties.cacheServerConfiguration=true
spring.datasource.hikari.data-source-properties.elideSetAutoCommits=true
spring.datasource.hikari.data-source-properties.maintainTimeStats=false


# specifies the SQL dialect that Hibernate would use
# when generating SQL queries for a specific database.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Hibernate updates the schema to match the entity mappings without dropping any tables or columns. 
# It adds new tables and columns as needed.
# if using external migration tools spring will validate the 
# schema of the db is consistent with entity declarations or not
spring.jpa.hibernate.ddl-auto=validate

# Show Sql queries being run by hibernate
spring.jpa.properties.hibernate.show_sql=true

# Show the Sql in formatted form
spring.jpa.properties.hibernate.format_sql=true

# Show the bind parameters to queries
logging.level.org.hibernate.orm.jdbc.bind=trace

# Automatically generate sql scripts to create schema
# Spring does it by reflection on the entity classes
# but keeping these properties always on keeps appending 
# to the same file so only uncomment when you want ot use it 

# spring.jpa.properties.jakarta.persistence.schema-generation.scripts.action=drop-and-create
# spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-source=metadata
# spring.jpa.properties.jakarta.persistence.schema-generation.scripts.drop-target=drop-and-create.sql
# spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-target=drop-and-create.sql

# flyway settings
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration/mysql
